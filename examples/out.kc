push 200
pop rvx
push 1000
pop rmx

; (GLOBAL_UNDESTURBENCE_CHECKER)[op_20](7.77778e+06)
push 7777777.000000
pop [100]


; ((((A)[op_20](-7777.78))[op_305](((B)[op_20](-7777.78))[op_305](((C)[op_20](-7777.78))[op_305]([op_305]))))[op_300](printn))[op_301]((){)
jmp _func_printn_END
_func_printn_BEGIN:
printn:

; ((A)[op_8](-7777.78))[op_12]([op_31]((){))
if_1_cond:
push [rvx + 0]
push 0
push 7777.777000
sub

neq

push 0
jne if_1_true
if_1_false:

jmp if_1_end

if_1_true:

; (d(A))[op_202]
push [rvx + 0]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_1_end:

; ((B)[op_8](-7777.78))[op_12]([op_31]((){))
if_2_cond:
push [rvx + 1]
push 0
push 7777.777000
sub

neq

push 0
jne if_2_true
if_2_false:

jmp if_2_end

if_2_true:

; (d(B))[op_202]
push [rvx + 1]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_2_end:

; ((C)[op_8](-7777.78))[op_12]([op_31]((){))
if_3_cond:
push [rvx + 2]
push 0
push 7777.777000
sub

neq

push 0
jne if_3_true
if_3_false:

jmp if_3_end

if_3_true:

; (d(C))[op_202]
push [rvx + 2]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_3_end:

; (d)[op_202]
push 10
dup
out_c
pop rzx
push 0
swp
ret
_func_printn_END:

; ((((arr)[op_20](arr))[op_305](((size)[op_20](size))[op_305]([op_305])))[op_300](printn_arr))[op_301]((){)
jmp _func_printn_arr_END
_func_printn_arr_BEGIN:
printn_arr:

; (i)[op_20](0)
push 0.000000
pop [rvx + 2]

; ((i)<((size)-(1)))[op_13]((){)
while_1_cond:
push [rvx + 2]
push [rvx + 1]
push 1.000000
sub
lt

push 0
je while_1_end

; (d((((i)[op_202])[op_306]([op_306]))[op_302](arr)))[op_202]
push [rvx + 0]
push [rvx + 2]
add
pop rax
push [rax + 1]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

; ((i)=((i)+(1)))[op_202]
push [rvx + 2]
push 1.000000
add
pop [rvx + 2]
push [rvx + 2]
pop rzx
jmp while_1_cond

while_1_end:

; (d((((i)[op_202])[op_306]([op_306]))[op_302](arr)))[op_202]
push [rvx + 0]
push [rvx + 2]
add
pop rax
push [rax + 1]
dup
out
pop rzx
push 0
swp
ret
_func_printn_arr_END:

; (([op_305])[op_300](_n))[op_301]()
jmp _func__n_END
_func__n_BEGIN:
_n:

; (d)[op_202]
push 10
dup
out_c
pop rzx
push 0
swp
ret
_func__n_END:

; ((((A)[op_20](-7777.78))[op_305](((B)[op_20](-7777.78))[op_305](((C)[op_20](-7777.78))[op_305]([op_305]))))[op_300](printc))[op_301]((){)
jmp _func_printc_END
_func_printc_BEGIN:
printc:

; ((A)[op_8](-7777.78))[op_12]([op_31]((){))
if_4_cond:
push [rvx + 0]
push 0
push 7777.777000
sub

neq

push 0
jne if_4_true
if_4_false:

jmp if_4_end

if_4_true:

; (e(A))[op_202]
push [rvx + 0]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_4_end:

; ((B)[op_8](-7777.78))[op_12]([op_31]((){))
if_5_cond:
push [rvx + 1]
push 0
push 7777.777000
sub

neq

push 0
jne if_5_true
if_5_false:

jmp if_5_end

if_5_true:

; (e(B))[op_202]
push [rvx + 1]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_5_end:

; ((C)[op_8](-7777.78))[op_12]([op_31]((){))
if_6_cond:
push [rvx + 2]
push 0
push 7777.777000
sub

neq

push 0
jne if_6_true
if_6_false:

jmp if_6_end

if_6_true:

; (e(C))[op_202]
push [rvx + 2]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_6_end:

; (d)[op_202]
push 10
dup
out_c
pop rzx
push 0
swp
ret
_func_printc_END:

; ((((h)[op_20])[op_305](((w)[op_20])[op_305]([op_305])))[op_300](init_2d))[op_301]((){)
jmp _func_init_2d_END
_func_init_2d_BEGIN:
init_2d:

; (arr)[op_20](g(h))
push [rvx + 0]
pop rax
push rmx
push rmx
push rax
add
pop rmx
pop [rvx + 2]

; (arr_data)[op_20](g((h)*(w)))
push [rvx + 0]
push [rvx + 1]
mul
pop rax
push rmx
push rmx
push rax
add
pop rmx
pop [rvx + 3]

; ((((i)[op_20](0))[op_16]((i)<(h)))[op_16]((i)=((i)+(1))))[op_14]((){)

for_1_init_block:
push 0.000000
pop [rvx + 4]

for_1_start:

for_1_cond:
push [rvx + 4]
push [rvx + 0]
lt

push 0
je for_1_end

; (((((i)[op_202])[op_306]([op_306]))[op_302](arr))=((arr_data)+((w)*(i))))[op_202]
push [rvx + 3]
push [rvx + 1]
push [rvx + 4]
mul
add
pop rbx
push rbx
push rvx + 2
pop rax
push [rax]
push [rvx + 4]
push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx
push [rvx + 4]
push 1.000000
add
pop [rvx + 4]
push [rvx + 4]
pop rzx
jmp for_1_cond

for_1_end:

; ([op_17](arr))[op_202]
push [rvx + 2]
swp
ret
pop rzx
push 0
swp
ret
_func_init_2d_END:

; (_x)[op_20](0)
push 0.000000
pop [101]


; (_y)[op_20](1)
push 1.000000
pop [102]


; (_w)[op_20](2)
push 2.000000
pop [103]


; (((x)[op_305]((y)[op_305]([op_305])))[op_300](BasePoint))[op_301]((){)
jmp _func_BasePoint_END
_func_BasePoint_BEGIN:
BasePoint:

; (p)[op_20](g(2))
push 2.000000
pop rax
push rmx
push rmx
push rax
add
pop rmx
pop [rvx + 2]

; (((((_x)[op_202])[op_306]([op_306]))[op_302](p))=(x))[op_202]
push [rvx + 0]
pop rbx
push rbx
push rvx + 2
pop rax
push [rax]
push [101]

push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx

; (((((_y)[op_202])[op_306]([op_306]))[op_302](p))=(y))[op_202]
push [rvx + 1]
pop rbx
push rbx
push rvx + 2
pop rax
push [rax]
push [102]

push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx

; ([op_17](p))[op_202]
push [rvx + 2]
swp
ret
pop rzx
push 0
swp
ret
_func_BasePoint_END:

; (((x)[op_305]((y)[op_305]((w)[op_305]([op_305]))))[op_300](PointWithWeight))[op_301]((){)
jmp _func_PointWithWeight_END
_func_PointWithWeight_BEGIN:
PointWithWeight:

; (p)[op_20](BasePoint)
push [rvx + 0]
pop [rvx + 3]
push [rvx + 1]
pop [rvx + 4]
push rvx
push 3
add
pop rvx
call BasePoint
push rvx
push 3
sub
pop rvx
pop [rvx + 3]

; (g(1))[op_202]
push 1.000000
pop rax
push rmx
push rmx
push rax
add
pop rmx
pop rzx

; (((((_w)[op_202])[op_306]([op_306]))[op_302](p))=(w))[op_202]
push [rvx + 2]
pop rbx
push rbx
push rvx + 3
pop rax
push [rax]
push [103]

push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx

; ([op_17](p))[op_202]
push [rvx + 3]
swp
ret
pop rzx
push 0
swp
ret
_func_PointWithWeight_END:

; (([op_305])[op_300](main))[op_301]((){)
jmp _func_main_END
_func_main_BEGIN:
main:

; (a)[op_20](4)
push 4.000000
pop [rvx + 0]

; (b)[op_20](5)
push 5.000000
pop [rvx + 1]

; (c)[op_20](7)
push 7.000000
pop [rvx + 2]

; (sum)[op_20](1)
push 1.000000
pop [rvx + 3]

; (c)[op_20](sum)
push [rvx + 3]
push 0
swp
ret
_func_main_END:

; (main)[op_202]
push rvx
push 4
add
pop rvx
call main
push rvx
push 4
sub
pop rvx
pop rzx
