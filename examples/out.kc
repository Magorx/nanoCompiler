push 200
pop rvx
push 1000
pop rmx

; (([op_305])[op_300](main_fact))[op_301]((){)
jmp _func_main_fact_1_END
_func_main_fact_1_BEGIN:
main_fact_1:

; ((((q)[op_20](0))[op_17]((q)<(1e+06)))[op_17]((q)[op_24](1)))[op_14]((){)

for_1_init_block:
push 0
pop [rvx + 0]

for_1_start:

for_1_cond:
push [rvx + 0]
push 1000000
lt

push 0
je for_1_end

; ((((x)[op_20])[op_305]([op_305]))[op_300](fact))[op_301]()
jmp _func_fact_5_END
_func_fact_5_BEGIN:
fact_5:

; ((x)[op_5](1))[op_12](()[op_31]())
if_1_cond:
push [rvx + 0]
push 1
le

push 0
jne if_1_true
if_1_false:

; ([op_18]((x)*(((((x)-(1))[op_202])[op_306]([op_306]))[op_302](fact))))[op_202]
push [rvx + 0]
push [rvx + 0]
push 1
sub
pop [rvx + 1]
push rvx
push 1
add
pop rvx
call fact_5
push rvx
push 1
sub
pop rvx
mul
swp
ret
pop rzx

jmp if_1_end

if_1_true:

; ([op_18](1))[op_202]
push 1
swp
ret
pop rzx

if_1_end:
push 0
swp
ret
_func_fact_5_END:

; ((((20)[op_202])[op_306]([op_306]))[op_302](fact))[op_202]
push 20
pop [rvx + 1]
push rvx
push 1
add
pop rvx
call fact_5
push rvx
push 1
sub
pop rvx
pop rzx
for_1_action:
push [rvx + 0]
push 1
add
pop [rvx + 0]
push [rvx + 0]
pop rzx
jmp for_1_cond

for_1_end:
push 0
swp
ret
_func_main_fact_1_END:

; (main_fact)[op_202]
push rvx
push 0
add
pop rvx
call main_fact_1
push rvx
push 0
sub
pop rvx
pop rzx
