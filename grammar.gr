/* Grammar ================================\

G ::= {FUNC_DECL}+

// Functions ==================================================================

FUNC_DECL  ::= func ID ARGLIST_DECL BLOCK_STATEMENT
FUNC_CALL  ::= ID ARGLIST_CALL

ARGLIST_DECL ::= {[ ARG_DECL ]}*
ARG_DECL     ::= DEF_VAR | ID

ARGLIST_DECL ::= {[ ARG_CALL ]}*
ARG_CALL     ::= \nothing | . | EXPR

// Statements =================================================================

BLOCK_STATEMENT ::= STATEMENT | { BLOCK_STATEMENT* }
STATEMENT       ::= {DEF_VAR | ASGN | ELEM_FUNC | EXPR} ; | IF | WHILE | FUNC_DECL

ELEM_FUNC ::= {putn EXPR | putc EXPR | @}

IF    ::= ? (EXPR) BLOCK_STATEMENT {: BLOCK_STATEMENT}?
WHILE ::= >| (EXPR) BLOCK_STATEMENT

// Variables ==================================================================

DEF_VAR ::= "var" {ID | ID = EXPR}

// Math expression ============================================================

EXPR ::= LOGIC_EXPR | ID = EXPR

LOGIC_EXPR ::= AND_EXPR {|| AND_EXPR}*
AND_EXPR ::= COND {&& COND}*
COND ::= MATH_EXPR {{ < | <= | == | >= | > | != } MATH_EXPR}*
MATH_EXPR ::= TERM {[+-]TERM}*
TERM ::= FACT {{/|*}FACT}*

FACT ::= [+-]FACT | UNIT^FACT | UNIT
UNIT ::= FUNC_CALL | ID | (EXPR) | ELEM_FUNC |NUMB

// Number & Id ================================================================

NUMB ::= [+-]?[0-9]+{.[0-9]+}?{[eE][0-9]+}?
ID   ::= [a-zA-Z_][a-zA-Z_0-9]*

*///=======================================/