push 200
pop rvx

; (P)[op_20](1)
push 1.000000
pop [100]


; ((((A)[op_20](-7777.78))[op_305](((B)[op_20](-7777.78))[op_305](((C)[op_20](-7777.78))[op_305]([op_305]))))[op_300](printn))[op_301]((){)
jmp _func_printn_END
_func_printn_BEGIN:
printn:

; ((A)[op_8](-7777.78))[op_15]([op_31]((){))
if_1_cond:
push [rvx + 0]
push 0
push 7777.777000
sub

neq

push 0
jne if_1_true
if_1_false:

jmp if_1_end

if_1_true:

; (d(A))[op_202]
push [rvx + 0]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_1_end:

; ((B)[op_8](-7777.78))[op_15]([op_31]((){))
if_2_cond:
push [rvx + 1]
push 0
push 7777.777000
sub

neq

push 0
jne if_2_true
if_2_false:

jmp if_2_end

if_2_true:

; (d(B))[op_202]
push [rvx + 1]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_2_end:

; ((C)[op_8](-7777.78))[op_15]([op_31]((){))
if_3_cond:
push [rvx + 2]
push 0
push 7777.777000
sub

neq

push 0
jne if_3_true
if_3_false:

jmp if_3_end

if_3_true:

; (d(C))[op_202]
push [rvx + 2]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_3_end:

; (d)[op_202]
push 10
dup
out_c
pop rzx
push 0
swp
ret
_func_printn_END:

; ((((arr)[op_20](arr))[op_305](((size)[op_20](size))[op_305]([op_305])))[op_300](printn_arr))[op_301]((){)
jmp _func_printn_arr_END
_func_printn_arr_BEGIN:
printn_arr:

; (i)[op_20](0)
push 0.000000
pop [rvx + 2]

; ((i)<((size)-(1)))[op_16]((){)
while_1_cond:
push [rvx + 2]
push [rvx + 1]
push 1.000000
sub
lt

push 0
je while_1_end

; (d((((i)[op_202])[op_306]([op_306]))[op_302](arr)))[op_202]
push [rvx + 0]
push [rvx + 2]
add
pop rax
push [rax + 1]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

; ((i)=((i)+(1)))[op_202]
push [rvx + 2]
push 1.000000
add
pop [rvx + 2]
push [rvx + 2]
pop rzx
jmp while_1_cond

while_1_end:

; (d((((i)[op_202])[op_306]([op_306]))[op_302](arr)))[op_202]
push [rvx + 0]
push [rvx + 2]
add
pop rax
push [rax + 1]
dup
out
pop rzx
push 0
swp
ret
_func_printn_arr_END:

; (([op_305])[op_300](_n))[op_301]()
jmp _func__n_END
_func__n_BEGIN:
_n:

; (d)[op_202]
push 10
dup
out_c
pop rzx
push 0
swp
ret
_func__n_END:

; ((((A)[op_20](-7777.78))[op_305](((B)[op_20](-7777.78))[op_305](((C)[op_20](-7777.78))[op_305]([op_305]))))[op_300](printc))[op_301]((){)
jmp _func_printc_END
_func_printc_BEGIN:
printc:

; ((A)[op_8](-7777.78))[op_15]([op_31]((){))
if_4_cond:
push [rvx + 0]
push 0
push 7777.777000
sub

neq

push 0
jne if_4_true
if_4_false:

jmp if_4_end

if_4_true:

; (e(A))[op_202]
push [rvx + 0]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_4_end:

; ((B)[op_8](-7777.78))[op_15]([op_31]((){))
if_5_cond:
push [rvx + 1]
push 0
push 7777.777000
sub

neq

push 0
jne if_5_true
if_5_false:

jmp if_5_end

if_5_true:

; (e(B))[op_202]
push [rvx + 1]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_5_end:

; ((C)[op_8](-7777.78))[op_15]([op_31]((){))
if_6_cond:
push [rvx + 2]
push 0
push 7777.777000
sub

neq

push 0
jne if_6_true
if_6_false:

jmp if_6_end

if_6_true:

; (e(C))[op_202]
push [rvx + 2]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_6_end:

; (d)[op_202]
push 10
dup
out_c
pop rzx
push 0
swp
ret
_func_printc_END:

; (([op_305])[op_300](main_fact))[op_301]((){)
jmp _func_main_fact_END
_func_main_fact_BEGIN:
main_fact:

; ((((x)[op_20])[op_305]([op_305]))[op_300](fact))[op_301]()
jmp _func_fact_END
_func_fact_BEGIN:
fact:

; ((x)[op_5](1))[op_15](()[op_31]())
if_7_cond:
push [rvx + 0]
push 1.000000
le

push 0
jne if_7_true
if_7_false:

; ([op_19]((x)*(((((x)-(1))[op_202])[op_306]([op_306]))[op_302](fact))))[op_202]
push [rvx + 0]
push [rvx + 0]
push 1.000000
sub
pop [rvx + 1]
push rvx
push 1
add
pop rvx
call fact
push rvx
push 1
sub
pop rvx
mul
swp
ret
pop rzx

jmp if_7_end

if_7_true:

; ([op_19](1))[op_202]
push 1.000000
swp
ret
pop rzx

if_7_end:
push 0
swp
ret
_func_fact_END:

; (((((((f)[op_202])[op_306]([op_306]))[op_302](fact))[op_202])[op_306]([op_306]))[op_302](printn))[op_202]
in
pop [rvx + 0]
push rvx
push 0
add
pop rvx
call fact
push rvx
push 0
sub
pop rvx
pop [rvx + 0]
push 0
push 7777.777000
sub

pop [rvx + 1]
push 0
push 7777.777000
sub

pop [rvx + 2]
push rvx
push 0
add
pop rvx
call printn
push rvx
push 0
sub
pop rvx
pop rzx
push 0
swp
ret
_func_main_fact_END:

; (INF)[op_20](3)
push 3.000000
pop [101]


; (TWO)[op_20](2)
push 2.000000
pop [102]


; (ONE)[op_20](1)
push 1.000000
pop [103]


; (NON)[op_20](0)
push 0.000000
pop [104]


; (((a)[op_305]((b)[op_305]((c)[op_305]([op_305]))))[op_300](solve_square))[op_301]((){)
jmp _func_solve_square_END
_func_solve_square_BEGIN:
solve_square:

; ((a)[op_7](0))[op_15](((){)[op_31]((){))
if_8_cond:
push [rvx + 0]
push 0.000000
eq

push 0
jne if_8_true
if_8_false:

; (d)[op_20](((b)^(2))-(((4)*(a))*(c)))
push [rvx + 1]
push 2.000000
pow
push 4.000000
push [rvx + 0]
mul
push [rvx + 2]
mul
sub
pop [rvx + 3]

; ((d)<(0))[op_15]([op_31]((){))
if_9_cond:
push [rvx + 3]
push 0.000000
lt

push 0
jne if_9_true
if_9_false:

jmp if_9_end

if_9_true:

; ((((110)[op_202])[op_306](((111)[op_202])[op_306](((110)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 110.000000
pop [rvx + 4]
push 111.000000
pop [rvx + 5]
push 110.000000
pop [rvx + 6]
push rvx
push 4
add
pop rvx
call printc
push rvx
push 4
sub
pop rvx
pop rzx

; ([op_19](NON))[op_202]
push [104]

swp
ret
pop rzx

if_9_end:

; ((d)[op_7](0))[op_15]([op_31]((){))
if_10_cond:
push [rvx + 3]
push 0.000000
eq

push 0
jne if_10_true
if_10_false:

jmp if_10_end

if_10_true:

; ((((111)[op_202])[op_306](((110)[op_202])[op_306](((101)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 111.000000
pop [rvx + 4]
push 110.000000
pop [rvx + 5]
push 101.000000
pop [rvx + 6]
push rvx
push 4
add
pop rvx
call printc
push rvx
push 4
sub
pop rvx
pop rzx

; (x)[op_20]((-(b))/((2)*(a)))
push 0
push [rvx + 1]
sub
push 2.000000
push [rvx + 0]
mul
div
pop [rvx + 4]

; ((((x)[op_202])[op_306]([op_306]))[op_302](printn))[op_202]
push [rvx + 4]
pop [rvx + 5]
push 0
push 7777.777000
sub

pop [rvx + 6]
push 0
push 7777.777000
sub

pop [rvx + 7]
push rvx
push 5
add
pop rvx
call printn
push rvx
push 5
sub
pop rvx
pop rzx

; ([op_19](ONE))[op_202]
push [103]

swp
ret
pop rzx

if_10_end:

; (sq)[op_20]((d)^(0.5))
push [rvx + 3]
push 0.500000
pow
pop [rvx + 4]

; (x1)[op_20](((-(b))+(sq))/((2)*(a)))
push 0
push [rvx + 1]
sub
push [rvx + 4]
add
push 2.000000
push [rvx + 0]
mul
div
pop [rvx + 5]

; (x2)[op_20](((-(b))+(sq))/((2)*(a)))
push 0
push [rvx + 1]
sub
push [rvx + 4]
add
push 2.000000
push [rvx + 0]
mul
div
pop [rvx + 6]

; ((((116)[op_202])[op_306](((119)[op_202])[op_306](((111)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 116.000000
pop [rvx + 7]
push 119.000000
pop [rvx + 8]
push 111.000000
pop [rvx + 9]
push rvx
push 7
add
pop rvx
call printc
push rvx
push 7
sub
pop rvx
pop rzx

; ((((x1)[op_202])[op_306](((x2)[op_202])[op_306]([op_306])))[op_302](printn))[op_202]
push [rvx + 5]
pop [rvx + 7]
push [rvx + 6]
pop [rvx + 8]
push 0
push 7777.777000
sub

pop [rvx + 9]
push rvx
push 7
add
pop rvx
call printn
push rvx
push 7
sub
pop rvx
pop rzx

jmp if_8_end

if_8_true:

; ((b)[op_7](0))[op_15](((){)[op_31]((){))
if_11_cond:
push [rvx + 1]
push 0.000000
eq

push 0
jne if_11_true
if_11_false:

; (x)[op_20]((-(c))/(b))
push 0
push [rvx + 2]
sub
push [rvx + 1]
div
pop [rvx + 3]

; ((((111)[op_202])[op_306](((110)[op_202])[op_306](((101)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 111.000000
pop [rvx + 4]
push 110.000000
pop [rvx + 5]
push 101.000000
pop [rvx + 6]
push rvx
push 4
add
pop rvx
call printc
push rvx
push 4
sub
pop rvx
pop rzx

; ((((x)[op_202])[op_306]([op_306]))[op_302](printn))[op_202]
push [rvx + 3]
pop [rvx + 4]
push 0
push 7777.777000
sub

pop [rvx + 5]
push 0
push 7777.777000
sub

pop [rvx + 6]
push rvx
push 4
add
pop rvx
call printn
push rvx
push 4
sub
pop rvx
pop rzx

; ([op_19](x))[op_202]
push [rvx + 3]
swp
ret
pop rzx

jmp if_11_end

if_11_true:

; ((c)[op_7](0))[op_15](((){)[op_31]((){))
if_12_cond:
push [rvx + 2]
push 0.000000
eq

push 0
jne if_12_true
if_12_false:

; ((((110)[op_202])[op_306](((111)[op_202])[op_306](((110)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 110.000000
pop [rvx + 3]
push 111.000000
pop [rvx + 4]
push 110.000000
pop [rvx + 5]
push rvx
push 3
add
pop rvx
call printc
push rvx
push 3
sub
pop rvx
pop rzx

; ([op_19](NON))[op_202]
push [104]

swp
ret
pop rzx

jmp if_12_end

if_12_true:

; ((((105)[op_202])[op_306](((110)[op_202])[op_306](((102)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 105.000000
pop [rvx + 3]
push 110.000000
pop [rvx + 4]
push 102.000000
pop [rvx + 5]
push rvx
push 3
add
pop rvx
call printc
push rvx
push 3
sub
pop rvx
pop rzx

; ([op_19](INF))[op_202]
push [101]

swp
ret
pop rzx

if_12_end:

if_11_end:

if_8_end:
push 0
swp
ret
_func_solve_square_END:

; (([op_305])[op_300](main_sq))[op_301]((){)
jmp _func_main_sq_END
_func_main_sq_BEGIN:
main_sq:

; ((((f)[op_202])[op_306](((f)[op_202])[op_306](((f)[op_202])[op_306]([op_306]))))[op_302](solve_square))[op_202]
in
pop [rvx + 0]
in
pop [rvx + 1]
in
pop [rvx + 2]
push rvx
push 0
add
pop rvx
call solve_square
push rvx
push 0
sub
pop rvx
pop rzx
push 0
swp
ret
_func_main_sq_END:

; (([op_305])[op_300](main_test))[op_301]((){)
jmp _func_main_test_END
_func_main_test_BEGIN:
main_test:

; ((((a)[op_20])[op_305](((b)[op_20])[op_305]([op_305])))[op_300](sum))[op_301]((){)
jmp _func_sum_END
_func_sum_BEGIN:
sum:

; ([op_19]((a)+(b)))[op_202]
push [rvx + 0]
push [rvx + 1]
add
swp
ret
pop rzx
push 0
swp
ret
_func_sum_END:

; ((((a)[op_20])[op_305]([op_305]))[op_300](val))[op_301]((){)
jmp _func_val_END
_func_val_BEGIN:
val:

; ([op_19](a))[op_202]
push [rvx + 0]
swp
ret
pop rzx
push 0
swp
ret
_func_val_END:

; ((((((((((1)[op_202])[op_306]([op_306]))[op_302](val))[op_202])[op_306]((((((2)[op_202])[op_306]([op_306]))[op_302](val))[op_202])[op_306]([op_306])))[op_302](sum))[op_202])[op_306]([op_306]))[op_302](printn))[op_202]
push 1.000000
pop [rvx + 0]
push rvx
push 0
add
pop rvx
call val
push rvx
push 0
sub
pop rvx
pop [rvx + 0]
push 2.000000
pop [rvx + 1]
push rvx
push 1
add
pop rvx
call val
push rvx
push 1
sub
pop rvx
pop [rvx + 1]
push rvx
push 0
add
pop rvx
call sum
push rvx
push 0
sub
pop rvx
pop [rvx + 0]
push 0
push 7777.777000
sub

pop [rvx + 1]
push 0
push 7777.777000
sub

pop [rvx + 2]
push rvx
push 0
add
pop rvx
call printn
push rvx
push 0
sub
pop rvx
pop rzx
push 0
swp
ret
_func_main_test_END:

; ((((x)[op_20])[op_305]([op_305]))[op_300](sqrt))[op_301]((){)
jmp _func_sqrt_END
_func_sqrt_BEGIN:
sqrt:

; ([op_19]((x)^(0.5)))[op_202]
push [rvx + 0]
push 0.500000
pow
swp
ret
pop rzx
push 0
swp
ret
_func_sqrt_END:

; ((((arr)[op_20](arr))[op_305](((size)[op_20](size))[op_305]([op_305])))[op_300](qsort))[op_301]((){)
jmp _func_qsort_END
_func_qsort_BEGIN:
qsort:

; (i)[op_20](0)
push 0.000000
pop [rvx + 2]

; (j)[op_20](0)
push 0.000000
pop [rvx + 3]

; (flag)[op_20](1)
push 1.000000
pop [rvx + 4]

; ((i)=(0))[op_202]
push 0.000000
pop [rvx + 2]
push [rvx + 2]
pop rzx

; (((i)<(size))[op_11](flag))[op_16]((){)
while_2_cond:
push [rvx + 2]
push [rvx + 1]
lt
push [rvx + 4]
l_and

push 0
je while_2_end

; ((j)=(0))[op_202]
push 0.000000
pop [rvx + 3]
push [rvx + 3]
pop rzx

; ((flag)=(0))[op_202]
push 0.000000
pop [rvx + 4]
push [rvx + 4]
pop rzx

; ((j)<(size))[op_16]((){)
while_3_cond:
push [rvx + 3]
push [rvx + 1]
lt

push 0
je while_3_end

; (((((i)[op_202])[op_306]([op_306]))[op_302](arr))<((((j)[op_202])[op_306]([op_306]))[op_302](arr)))[op_15]([op_31]((){))
if_13_cond:
push [rvx + 0]
push [rvx + 2]
add
pop rax
push [rax + 1]
push [rvx + 0]
push [rvx + 3]
add
pop rax
push [rax + 1]
lt

push 0
jne if_13_true
if_13_false:

jmp if_13_end

if_13_true:

; (tmp)[op_20]((((i)[op_202])[op_306]([op_306]))[op_302](arr))
push [rvx + 0]
push [rvx + 2]
add
pop rax
push [rax + 1]
pop [rvx + 5]

; (((((i)[op_202])[op_306]([op_306]))[op_302](arr))=((((j)[op_202])[op_306]([op_306]))[op_302](arr)))[op_202]
push [rvx + 0]
push [rvx + 3]
add
pop rax
push [rax + 1]
pop rbx
push rbx
push rvx + 0
pop rax
push [rax]
push [rvx + 2]
push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx

; (((((j)[op_202])[op_306]([op_306]))[op_302](arr))=(tmp))[op_202]
push [rvx + 5]
pop rbx
push rbx
push rvx + 0
pop rax
push [rax]
push [rvx + 3]
push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx

; ((flag)=(1))[op_202]
push 1.000000
pop [rvx + 4]
push [rvx + 4]
pop rzx

if_13_end:

; ((j)=((j)+(1)))[op_202]
push [rvx + 3]
push 1.000000
add
pop [rvx + 3]
push [rvx + 3]
pop rzx
jmp while_3_cond

while_3_end:

; ((i)=((i)+(1)))[op_202]
push [rvx + 2]
push 1.000000
add
pop [rvx + 2]
push [rvx + 2]
pop rzx
jmp while_2_cond

while_2_end:
push 0
swp
ret
_func_qsort_END:

; (([op_305])[op_300](main_sort))[op_301]((){)
jmp _func_main_sort_END
_func_main_sort_BEGIN:
main_sort:

; (size)[op_20](100)
push 100.000000
pop [rvx + 0]

; ((100)[op_22](arr))[op_21]
push 1
push rvx
add
pop [rvx + 1]

; (n)[op_20](f)
in
pop [rvx + 102]

; ((size)=(n))[op_202]
push [rvx + 102]
pop [rvx + 0]
push [rvx + 0]
pop rzx

; ((((i)[op_20](0))[op_18]((i)<(size)))[op_18]((i)=((i)+(1))))[op_17]()

for_1_init_block:
push 0.000000
pop [rvx + 103]

for_1_start:

for_1_cond:
push [rvx + 103]
push [rvx + 0]
lt

push 0
je for_1_end

; (((((i)[op_202])[op_306]([op_306]))[op_302](arr))=(f))[op_202]
in
pop rbx
push rbx
push rvx + 1
pop rax
push [rax]
push [rvx + 103]
push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx
push [rvx + 103]
push 1.000000
add
pop [rvx + 103]
push [rvx + 103]
pop rzx
jmp for_1_cond

for_1_end:

; (qsort)[op_202]
push [rvx + 1]
pop [rvx + 103]
push [rvx + 0]
pop [rvx + 104]
push rvx
push 103
add
pop rvx
call qsort
push rvx
push 103
sub
pop rvx
pop rzx

; (printn_arr)[op_202]
push [rvx + 1]
pop [rvx + 103]
push [rvx + 0]
pop [rvx + 104]
push rvx
push 103
add
pop rvx
call printn_arr
push rvx
push 103
sub
pop rvx
pop rzx

; (_n)[op_202]
push rvx
push 103
add
pop rvx
call _n
push rvx
push 103
sub
pop rvx
pop rzx
push 0
swp
ret
_func_main_sort_END:

; ((((arr)[op_20])[op_305](((h)[op_20])[op_305](((w)[op_20])[op_305](((data)[op_20])[op_305]([op_305])))))[op_300](init_2d))[op_301]((){)
jmp _func_init_2d_END
_func_init_2d_BEGIN:
init_2d:

; (offset)[op_20](0)
push 0.000000
pop [rvx + 4]

; ((((i)[op_20](0))[op_18]((i)<(h)))[op_18]((i)=((i)+(1))))[op_17]((){)

for_2_init_block:
push 0.000000
pop [rvx + 5]

for_2_start:

for_2_cond:
push [rvx + 5]
push [rvx + 1]
lt

push 0
je for_2_end

; (((((i)[op_202])[op_306]([op_306]))[op_302](arr))=((data)+(offset)))[op_202]
push [rvx + 3]
push [rvx + 4]
add
pop rbx
push rbx
push rvx + 0
pop rax
push [rax]
push [rvx + 5]
push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx

; ((offset)=((offset)+(w)))[op_202]
push [rvx + 4]
push [rvx + 2]
add
pop [rvx + 4]
push [rvx + 4]
pop rzx
push [rvx + 5]
push 1.000000
add
pop [rvx + 5]
push [rvx + 5]
pop rzx
jmp for_2_cond

for_2_end:

; ([op_19](arr))[op_202]
push [rvx + 0]
swp
ret
pop rzx
push 0
swp
ret
_func_init_2d_END:

; (([op_305])[op_300](main))[op_301]((){)
jmp _func_main_END
_func_main_BEGIN:
main:

; (n)[op_20](15)
push 15.000000
pop [rvx + 0]

; ((15)[op_22](a))[op_21]
push 1
push rvx
add
pop [rvx + 1]

; ((225)[op_22](a_data))[op_21]
push 17
push rvx
add
pop [rvx + 17]

; ((((a)[op_202])[op_306](((15)[op_202])[op_306](((15)[op_202])[op_306](((a_data)[op_202])[op_306]([op_306])))))[op_302](init_2d))[op_202]
push [rvx + 1]
pop [rvx + 243]
push 15.000000
pop [rvx + 244]
push 15.000000
pop [rvx + 245]
push [rvx + 17]
pop [rvx + 246]
push rvx
push 243
add
pop rvx
call init_2d
push rvx
push 243
sub
pop rvx
pop rzx

; ((((i)[op_20](0))[op_18]((i)<(n)))[op_18]((i)=((i)+(1))))[op_17]((){)

for_3_init_block:
push 0.000000
pop [rvx + 243]

for_3_start:

for_3_cond:
push [rvx + 243]
push [rvx + 0]
lt

push 0
je for_3_end

; ((((j)[op_20](0))[op_18]((j)<(n)))[op_18]((j)=((j)+(1))))[op_17]((){)

for_4_init_block:
push 0.000000
pop [rvx + 244]

for_4_start:

for_4_cond:
push [rvx + 244]
push [rvx + 0]
lt

push 0
je for_4_end

; (((((i)[op_202])[op_306](((j)[op_202])[op_306]([op_306])))[op_302](a))=((i)+(j)))[op_202]
push [rvx + 243]
push [rvx + 244]
add
pop rbx
push rbx
push rvx + 1
pop rax
push [rax]
push [rvx + 243]
push 1
add
add
pop rax
push [rax]
push [rvx + 244]
push 1
add
add
pop rax
push rax
pop rcx
pop [rax]

push [rcx]

pop rzx
push [rvx + 244]
push 1.000000
add
pop [rvx + 244]
push [rvx + 244]
pop rzx
jmp for_4_cond

for_4_end:
push [rvx + 243]
push 1.000000
add
pop [rvx + 243]
push [rvx + 243]
pop rzx
jmp for_3_cond

for_3_end:

; ((((i)[op_20](0))[op_18]((i)<(n)))[op_18]((i)=((i)+(1))))[op_17]((){)

for_5_init_block:
push 0.000000
pop [rvx + 243]

for_5_start:

for_5_cond:
push [rvx + 243]
push [rvx + 0]
lt

push 0
je for_5_end

; (((((((i)[op_202])[op_306]([op_306]))[op_302](a))[op_202])[op_306](((n)[op_202])[op_306]([op_306])))[op_302](printn_arr))[op_202]
push [rvx + 1]
push [rvx + 243]
add
pop rax
push [rax + 1]
pop [rvx + 244]
push [rvx + 0]
pop [rvx + 245]
push rvx
push 244
add
pop rvx
call printn_arr
push rvx
push 244
sub
pop rvx
pop rzx

; (_n)[op_202]
push rvx
push 244
add
pop rvx
call _n
push rvx
push 244
sub
pop rvx
pop rzx
push [rvx + 243]
push 1.000000
add
pop [rvx + 243]
push [rvx + 243]
pop rzx
jmp for_5_cond

for_5_end:
push 0
swp
ret
_func_main_END:

; (main)[op_202]
push rvx
push 5
add
pop rvx
call main
push rvx
push 5
sub
pop rvx
pop rzx
