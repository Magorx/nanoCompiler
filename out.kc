push 200
pop rvx

; (P)[op_20](1)
push 1.000000
pop [100]


; ((((A)[op_20](-7777.78))[op_305](((B)[op_20](-7777.78))[op_305](((C)[op_20](-7777.78))[op_305]([op_305]))))[op_300](printn))[op_301]((){)
jmp _func_printn_END
_func_printn_BEGIN:
printn:

; ((A)[op_8](-7777.78))[op_15]([op_31]((){))
if_1_cond:
push [rvx + 0]
push 0
push 7777.777000
sub

neq

push 0
jne if_1_true
if_1_false:

jmp if_1_end

if_1_true:

; (d(A))[op_202]
push [rvx + 0]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_1_end:

; ((B)[op_8](-7777.78))[op_15]([op_31]((){))
if_2_cond:
push [rvx + 1]
push 0
push 7777.777000
sub

neq

push 0
jne if_2_true
if_2_false:

jmp if_2_end

if_2_true:

; (d(B))[op_202]
push [rvx + 1]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_2_end:

; ((C)[op_8](-7777.78))[op_15]([op_31]((){))
if_3_cond:
push [rvx + 2]
push 0
push 7777.777000
sub

neq

push 0
jne if_3_true
if_3_false:

jmp if_3_end

if_3_true:

; (d(C))[op_202]
push [rvx + 2]
dup
out
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_3_end:

; (d)[op_202]
push 10
dup
out_c
pop rzx

; ([op_18](4))[op_202]
push 4.000000
swp
ret
pop rzx
push 0
swp
ret
_func_printn_END:

; ((((A)[op_20](-7777.78))[op_305](((B)[op_20](-7777.78))[op_305](((C)[op_20](-7777.78))[op_305]([op_305]))))[op_300](printc))[op_301]((){)
jmp _func_printc_END
_func_printc_BEGIN:
printc:

; ((A)[op_8](-7777.78))[op_15]([op_31]((){))
if_4_cond:
push [rvx + 0]
push 0
push 7777.777000
sub

neq

push 0
jne if_4_true
if_4_false:

jmp if_4_end

if_4_true:

; (e(A))[op_202]
push [rvx + 0]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_4_end:

; ((B)[op_8](-7777.78))[op_15]([op_31]((){))
if_5_cond:
push [rvx + 1]
push 0
push 7777.777000
sub

neq

push 0
jne if_5_true
if_5_false:

jmp if_5_end

if_5_true:

; (e(B))[op_202]
push [rvx + 1]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_5_end:

; ((C)[op_8](-7777.78))[op_15]([op_31]((){))
if_6_cond:
push [rvx + 2]
push 0
push 7777.777000
sub

neq

push 0
jne if_6_true
if_6_false:

jmp if_6_end

if_6_true:

; (e(C))[op_202]
push [rvx + 2]
dup
out_c
pop rzx

; (e(32))[op_202]
push 32.000000
dup
out_c
pop rzx

if_6_end:

; (d)[op_202]
push 10
dup
out_c
pop rzx

; ([op_18](4))[op_202]
push 4.000000
swp
ret
pop rzx
push 0
swp
ret
_func_printc_END:

; (([op_305])[op_300](main_fact))[op_301]((){)
jmp _func_main_fact_END
_func_main_fact_BEGIN:
main_fact:

; ((((x)[op_20])[op_305]([op_305]))[op_300](fact))[op_301]()
jmp _func_fact_END
_func_fact_BEGIN:
fact:

; ((x)[op_5](1))[op_15](()[op_31]())
if_7_cond:
push [rvx + 0]
push 1.000000
le

push 0
jne if_7_true
if_7_false:

; ([op_18]((x)*(((((x)-(1))[op_202])[op_306]([op_306]))[op_302](fact))))[op_202]
push [rvx + 0]
push [rvx + 0]
push 1.000000
sub
pop [rvx + 1]
push rvx
push 1
add
pop rvx
call fact
push rvx
push 1
sub
pop rvx
mul
swp
ret
pop rzx

jmp if_7_end

if_7_true:

; ([op_18](1))[op_202]
push 1.000000
swp
ret
pop rzx

if_7_end:
push 0
swp
ret
_func_fact_END:

; (((((((f)[op_202])[op_306]([op_306]))[op_302](fact))[op_202])[op_306]([op_306]))[op_302](printn))[op_202]
in
pop [rvx + 0]
push rvx
push 0
add
pop rvx
call fact
push rvx
push 0
sub
pop rvx
pop [rvx + 0]
push 0
push 7777.777000
sub

pop [rvx + 1]
push 0
push 7777.777000
sub

pop [rvx + 2]
push rvx
push 0
add
pop rvx
call printn
push rvx
push 0
sub
pop rvx
pop rzx
push 0
swp
ret
_func_main_fact_END:

; (INF)[op_20](3)
push 3.000000
pop [101]


; (TWO)[op_20](2)
push 2.000000
pop [102]


; (ONE)[op_20](1)
push 1.000000
pop [103]


; (NON)[op_20](0)
push 0.000000
pop [104]


; (((a)[op_305]((b)[op_305]((c)[op_305]([op_305]))))[op_300](solve_square))[op_301]((){)
jmp _func_solve_square_END
_func_solve_square_BEGIN:
solve_square:

; ((a)[op_7](0))[op_15](((){)[op_31]((){))
if_8_cond:
push [rvx + 0]
push 0.000000
eq

push 0
jne if_8_true
if_8_false:

; (d)[op_20](((b)^(2))-(((4)*(a))*(c)))
push [rvx + 1]
push 2.000000
pow
push 4.000000
push [rvx + 0]
mul
push [rvx + 2]
mul
sub
pop [rvx + 3]

; ((d)<(0))[op_15]([op_31]((){))
if_9_cond:
push [rvx + 3]
push 0.000000
lt

push 0
jne if_9_true
if_9_false:

jmp if_9_end

if_9_true:

; ((((110)[op_202])[op_306](((111)[op_202])[op_306](((110)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 110.000000
pop [rvx + 4]
push 111.000000
pop [rvx + 5]
push 110.000000
pop [rvx + 6]
push rvx
push 4
add
pop rvx
call printc
push rvx
push 4
sub
pop rvx
pop rzx

; ([op_18](NON))[op_202]
push [104]

swp
ret
pop rzx

if_9_end:

; ((d)[op_7](0))[op_15]([op_31]((){))
if_10_cond:
push [rvx + 3]
push 0.000000
eq

push 0
jne if_10_true
if_10_false:

jmp if_10_end

if_10_true:

; ((((111)[op_202])[op_306](((110)[op_202])[op_306](((101)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 111.000000
pop [rvx + 4]
push 110.000000
pop [rvx + 5]
push 101.000000
pop [rvx + 6]
push rvx
push 4
add
pop rvx
call printc
push rvx
push 4
sub
pop rvx
pop rzx

; (x)[op_20]((-(b))/((2)*(a)))
push 0
push [rvx + 1]
sub
push 2.000000
push [rvx + 0]
mul
div
pop [rvx + 4]

; ((((x)[op_202])[op_306]([op_306]))[op_302](printn))[op_202]
push [rvx + 4]
pop [rvx + 5]
push 0
push 7777.777000
sub

pop [rvx + 6]
push 0
push 7777.777000
sub

pop [rvx + 7]
push rvx
push 5
add
pop rvx
call printn
push rvx
push 5
sub
pop rvx
pop rzx

; ([op_18](ONE))[op_202]
push [103]

swp
ret
pop rzx

if_10_end:

; (sq)[op_20]((d)^(0.5))
push [rvx + 3]
push 0.500000
pow
pop [rvx + 4]

; (x1)[op_20](((-(b))+(sq))/((2)*(a)))
push 0
push [rvx + 1]
sub
push [rvx + 4]
add
push 2.000000
push [rvx + 0]
mul
div
pop [rvx + 5]

; (x2)[op_20](((-(b))+(sq))/((2)*(a)))
push 0
push [rvx + 1]
sub
push [rvx + 4]
add
push 2.000000
push [rvx + 0]
mul
div
pop [rvx + 6]

; ((((116)[op_202])[op_306](((119)[op_202])[op_306](((111)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 116.000000
pop [rvx + 7]
push 119.000000
pop [rvx + 8]
push 111.000000
pop [rvx + 9]
push rvx
push 7
add
pop rvx
call printc
push rvx
push 7
sub
pop rvx
pop rzx

; ((((x1)[op_202])[op_306](((x2)[op_202])[op_306]([op_306])))[op_302](printn))[op_202]
push [rvx + 5]
pop [rvx + 7]
push [rvx + 6]
pop [rvx + 8]
push 0
push 7777.777000
sub

pop [rvx + 9]
push rvx
push 7
add
pop rvx
call printn
push rvx
push 7
sub
pop rvx
pop rzx

jmp if_8_end

if_8_true:

; ((b)[op_7](0))[op_15](((){)[op_31]((){))
if_11_cond:
push [rvx + 1]
push 0.000000
eq

push 0
jne if_11_true
if_11_false:

; (x)[op_20]((-(c))/(b))
push 0
push [rvx + 2]
sub
push [rvx + 1]
div
pop [rvx + 3]

; ((((111)[op_202])[op_306](((110)[op_202])[op_306](((101)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 111.000000
pop [rvx + 4]
push 110.000000
pop [rvx + 5]
push 101.000000
pop [rvx + 6]
push rvx
push 4
add
pop rvx
call printc
push rvx
push 4
sub
pop rvx
pop rzx

; ((((x)[op_202])[op_306]([op_306]))[op_302](printn))[op_202]
push [rvx + 3]
pop [rvx + 4]
push 0
push 7777.777000
sub

pop [rvx + 5]
push 0
push 7777.777000
sub

pop [rvx + 6]
push rvx
push 4
add
pop rvx
call printn
push rvx
push 4
sub
pop rvx
pop rzx

; ([op_18](x))[op_202]
push [rvx + 3]
swp
ret
pop rzx

jmp if_11_end

if_11_true:

; ((c)[op_7](0))[op_15](((){)[op_31]((){))
if_12_cond:
push [rvx + 2]
push 0.000000
eq

push 0
jne if_12_true
if_12_false:

; ((((110)[op_202])[op_306](((111)[op_202])[op_306](((110)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 110.000000
pop [rvx + 3]
push 111.000000
pop [rvx + 4]
push 110.000000
pop [rvx + 5]
push rvx
push 3
add
pop rvx
call printc
push rvx
push 3
sub
pop rvx
pop rzx

; ([op_18](NON))[op_202]
push [104]

swp
ret
pop rzx

jmp if_12_end

if_12_true:

; ((((105)[op_202])[op_306](((110)[op_202])[op_306](((102)[op_202])[op_306]([op_306]))))[op_302](printc))[op_202]
push 105.000000
pop [rvx + 3]
push 110.000000
pop [rvx + 4]
push 102.000000
pop [rvx + 5]
push rvx
push 3
add
pop rvx
call printc
push rvx
push 3
sub
pop rvx
pop rzx

; ([op_18](INF))[op_202]
push [101]

swp
ret
pop rzx

if_12_end:

if_11_end:

if_8_end:
push 0
swp
ret
_func_solve_square_END:

; (([op_305])[op_300](main_sq))[op_301]((){)
jmp _func_main_sq_END
_func_main_sq_BEGIN:
main_sq:

; ((((f)[op_202])[op_306](((f)[op_202])[op_306](((f)[op_202])[op_306]([op_306]))))[op_302](solve_square))[op_202]
in
pop [rvx + 0]
in
pop [rvx + 1]
in
pop [rvx + 2]
push rvx
push 0
add
pop rvx
call solve_square
push rvx
push 0
sub
pop rvx
pop rzx
push 0
swp
ret
_func_main_sq_END:

; (main_fact)[op_202]
push rvx
push 5
add
pop rvx
call main_fact
push rvx
push 5
sub
pop rvx
pop rzx
