{

	/* UNCOMMENT ME TO SEE THE HIGHLIGHT */
	/* UNCOMMENT ME TO SEE THE HIGHLIGHT */
	/* UNCOMMENT ME TO SEE THE HIGHLIGHT */
	/* UNCOMMENT ME TO SEE THE HIGHLIGHT */
	/* UNCOMMENT ME TO SEE THE HIGHLIGHT 

	Here are some features of my language:

		+ - * / ^ - math operators
		+= -= /= *= ^= - guess what
		% x y     - random
		@         - input
		09231     - numbers
		'x'       - chars
		()        - brackets

		var a     - variables
		var _a    - constants, starting from ONE '_' symbol

		var __VERY_IMPORTANT__  - with nice color included

		{
			{scopes & code blocks}
		}

		? () {} : {} - ?if? with :else:

		>| ()              - while loop
		>> (init|cond|act) - for loop
		                     alongside with
		|< - break
		<< - continue

		< <= >= > != == - logic operators
		|| &&           - logic connectors

	Here are more features:

		// one line comments

		/*
			and many lines of course!
		* / (<- space for bigger comment not to be interrupted)

		/> ultra important info               \
		\> inside a comment closed only by-> </

		~ absolutely ignored symbol 'Tilda' for highlighting ~
		~ thanks for such, Sublime Text                      ~

		var a[999] - static arrays with const length
		a[1] = x   - expressions with them

		var b = 188; - well, there are no types, so anything can be
		b[4][5^6];   - interpreted as a pointer

		var a = #( expr) - calloc 'expr' double values in one block by stack allocator
		        #(-expr) - that's how to free some memory

	Here are functions and calling conventions:

		func f[var a][var b = 7][var c = x + y][d][e] {... ret something;}
		If no return operator is used, function will be compiled as if there was ret 0; at the end.

		We've just defined a function, that has 5 arguments. Lets call it:

		var b = 15  ;
		var x = 9   ;
		var y = -4  ;
		var d = 0   ;
		var e = 0.03;

		f[42][.][][]; // equal to f[42][b][x + y][d][e];

		What the hell...
		Rules:
			1. If the argument is explicit (expression like 42 or 4 + k), it is calculated and passed as expected

			2. If the argument is '.' ("Dot"), the name of this arg in func definition will be searched for 
			   in the calling scope. Compilation will fail if there's no such variable.

			3. If the argument is empty ([] or just not mentioned, like e in the example), it is set to the default
			   value, BUT
			   
			   3.1. If arg in the func definition is "var var_name" without "= some_expr", 
			        it is REQUIRED to be explicit or '.'

			   3.2. If arg in the func definition is just "var_name", it will be enterprited 
			        as being called with '.' (without obligation to put this '.' explicitly)

			   3.3. If arg in the func definition is "var var_name = expr", expr will be calculated as being
			        used in the calling scope. Won't be compiled, if some vars are missing, of course


	And basic OPERATORS to connect language to kasm:

		__PUT_NUMBER__  X ; - print as a double number
		__PUT_CHAR__   'X'; - print as a char

		__G_INIT__ X Y;      - init graphics for screen X*Y
		__PUT_PIXEL__ X Y C; - put pixel on X Y cords with color C 
		                       (any double, but only chars are pictured)
		__G_TICK__;          - one tick of graphics (redraw the screen)

	/* UNCOMMENT ME TO SEE THE HIGHLIGHT 
	/* UNCOMMENT ME TO SEE THE HIGHLIGHT 
	/* UNCOMMENT ME TO SEE THE HIGHLIGHT 
	/* UNCOMMENT ME TO SEE THE HIGHLIGHT 
	/* UNCOMMENT ME TO SEE THE HIGHLIGHT */

	
	var GLOBAL_UNDESTURBENCE_CHECKER = 7777777;

	~/*===========================================*\~
	~|=============== STL LIBRARY =================|~
	~\*===========================================*/~

	func printn[var A = -7777.777][var B = -7777.777][var C = -7777.777] {
		? (A != -7777.777) {
			__PUT_NUMBER__ A;
			__PUT_CHAR__ ' ';
		}

		? (B != -7777.777) {
			__PUT_NUMBER__ B;
			__PUT_CHAR__ ' ';
		}

		? (C != -7777.777) {
			__PUT_NUMBER__ C;
			__PUT_CHAR__ ' ';
		}

		__PUT_NUMBER__;
	}

	func printn_arr[var arr = arr][var size = size] {
		var i = 0;
		>| (i < size - 1) {
			__PUT_NUMBER__ arr[i];
			__PUT_CHAR__ ' ';
			i = i + 1;
		}
		__PUT_NUMBER__ arr[i];
	}

	func printc[var A = -7777.777][var B = -7777.777][var C = -7777.777] {
		? (A != -7777.777) {
			__PUT_CHAR__ A;
			__PUT_CHAR__ ' ';
		}

		? (B != -7777.777) {
			__PUT_CHAR__ B;
			__PUT_CHAR__ ' ';
		}

		? (C != -7777.777) {
			__PUT_CHAR__ C;
			__PUT_CHAR__ ' ';
		}

		__PUT_NUMBER__;
	}

	func abs[var x] {
		? (x >= 0) ret x; : ret -x;
	}

	var _SCREEN_W = 80;
	var _SCREEN_H = 30;

	func init_2d[var h][var w] {
		var arr = #h;
		var arr_data = #(h * w);
		>> (var i = 0 | i < h | i = i + 1) {
			arr[i] = arr_data + w * i;
		}

		ret arr;
	}

	func g_init {
		__G_INIT__ _SCREEN_W _SCREEN_H;
	}

	func g_tick {
		__G_TICK__;
	}

	func put_pxl[y][x][c] {
		var pos = y * _SCREEN_W + x;
		ret __PUT_PIXEL__ pos c;
	}

	~/*===========================================*\~
	~|=============== STL LIBRARY =================|~
	~\*===========================================*/~

/>                                VECTOR LIB                                 </

	var _x = 0;
	var _y = 1;
	var _z = 2;

	func Vec3d[var x = 0][var y = 0][var z = 0] {
		var p = #3;
		p[_x] = x;
		p[_y] = y;
		p[_z] = z;
		ret p;
	}

	func sum_to_vv[var v1][var v2] {
		v1[_x] = v1[_x] + v2[_x];
		v1[_y] = v1[_y] + v2[_y];
		v1[_z] = v1[_z] + v2[_z];
		ret v1;
	}

	func sum_vv[var v1][var v2] {
		var ans = Vec3d;
		ans[_x] = v1[_x] + v2[_x];
		ans[_y] = v1[_y] + v2[_y];
		ans[_z] = v1[_z] + v2[_z];
		ret ans;
	}

	func sub_to_vv[var v1][var v2] {
		v1[_x] = v1[_x] - v2[_x];
		v1[_y] = v1[_y] - v2[_y];
		v1[_z] = v1[_z] - v2[_z];
		ret v1;
	}

	func sub_vv[var v1][var v2] {
		var ans = Vec3d;
		ans[_x] = v1[_x] - v2[_x];
		ans[_y] = v1[_y] - v2[_y];
		ans[_z] = v1[_z] - v2[_z];
		ret ans;
	}

	func mul_to_vi[var v][var k] {
		v[_x] = v[_x] * k;
		v[_y] = v[_y] * k;
		v[_z] = v[_z] * k;
	}

	func mul_vi[var v][var k] {
		var ans = Vec3d;
		ans[_x] = v[_x] * k;
		ans[_y] = v[_y] * k;
		ans[_z] = v[_z] * k;
		ret ans;
	}

	func dot_vv[var v1][var v2] {
		ret v1[_x] * v2[_x] + v1[_y] * v2[_y] + v1[_z] * v2[_z];
	}

	func vec_vv[var v1][var v2] {
		var ans = Vec3d;
		ans[_x] = v1[_y] * v2[_z] - v1[_z] * v2[_y];
		ans[_y] = v1[_z] * v2[_x] - v1[_x] * v2[_z];
		ans[_z] = v1[_x] * v2[_y] - v1[_y] * v2[_x];
		ret ans;
	}

	func vlen[var v] {
		ret (v[_x]^2 + v[_y]^2 + v[_z]^2) ^ 0.5;
	}

	func normalize[var v] {
		mul_to_vi[v][1 / vlen[v]];
		ret v;
	}

	func vcopy[var v1][var v2] {
		v1[_x] = v2[_x];
		v1[_y] = v2[_y];
		v1[_z] = v2[_z];
		ret v1;
	}

	func vdup[var v] {
		var v1 = Vec3d;
		v1[_x] = v[_x];
		v1[_y] = v[_y];
		v1[_z] = v[_z];
		ret v1;
	}

	func printv[var v] {
		printn[v[_x]][v[_y]][v[_z]];
	}

/>								|____________|  							 </
/>                              <-RAYTRACING->                               </
/>								|^^^^^^^^^^^^|	    						 </

/>                                RAY                                        </

	var _o = 0;
	var _d = 1;

	func Ray3d[o][d] {
		var ptr = #2;
		ptr[_o] = vdup[o];
		ptr[_d] = vdup[d];

		normalize[ptr[_d]];

		ret ptr;
	}

	func RayCast[ray][dist] {
		var p = vdup[ray[_d]];
		mul_to_vi[p][dist];
		sum_to_vv[p][ray[_o]];
		ret p;
	}


/>                                CAMERA                                     </

	var _pos = 0;
	var _dir = 3;

	var _dx    = 3;
	var _dy    = 4;
	var _dz    = 5;

	var _lu  = 9;
	var _dir_h = 12;
	var _dir_v = 15;

	var _scr_d = 6;
	var _scr_w = 7;
	var _scr_h = 8;
	var _lu_x  = 9;
	var _lu_y  = 10;
	var _lu_z  = 11;
	var _dir_hx = 12;
	var _dir_hy = 13;
	var _dir_hz = 14;
	var _dir_vx = 15;
	var _dir_vy = 16;
	var _dir_vz = 17;
	var _max_x  = 18;
	var _max_y  = 19;

	func calc_directives[var cam] {
		var p = sum_vv[cam + _pos][mul_vi[cam + _dir][cam[_scr_d]]];
		var vert = Vec3d[0][0][1];

		var horz = vec_vv[cam + _dir][vert];
		
		normalize[horz];
		normalize[vert];

		mul_to_vi[horz][cam[_scr_w] / 2];
		mul_to_vi[vert][cam[_scr_h] / 2];

		sum_to_vv[p][horz];
		sum_to_vv[p][vert];

		mul_to_vi[horz][-1];
		mul_to_vi[vert][-1];
		normalize[horz];
		normalize[vert];

		vcopy[cam + _dir_h][horz];
		vcopy[cam + _dir_v][vert];
		vcopy[cam + _lu   ][p   ];

		ret cam;
	}

	func Camera3d[x][y][z][dx][dy][dz][scr_d][scr_w][scr_h][max_x][max_y] {
		var ptr = #20; // just to have enough
		ptr[_x] = x;
		ptr[_y] = y;
		ptr[_z] = z;
		ptr[_dx] = dx;
		ptr[_dy] = dy;
		ptr[_dz] = dz;
		ptr[_scr_d] = scr_d;
		ptr[_scr_w] = scr_w;
		ptr[_scr_h] = scr_h;
		ptr[_max_x] = max_x;
		ptr[_max_y] = max_y;

		normalize[ptr + _dir];
		calc_directives[ptr];

		ret ptr;
	}

	var _SYMBOL_SIZE_Y_FIXING_COEF = 1.32;

	func CamRayXY[cam][x][y] {
		var p[3];
		var horz[3];
		var vert[3];

		vcopy[p][cam + _lu];
		vcopy[horz][cam + _dir_h];
		vcopy[vert][cam + _dir_v];

		x = x / cam[_max_x] * cam[_scr_w];
		y = y / cam[_max_y] * cam[_scr_h] * _SYMBOL_SIZE_Y_FIXING_COEF;
		mul_to_vi[horz][x];
		mul_to_vi[vert][y];

		sum_to_vv[p][horz];
		sum_to_vv[p][vert];

		sub_to_vv[p][cam + _pos];
		normalize[p];

		var ray = Ray3d[cam + _pos][p];
		ret ray;
	}

/>                                SPHERE                                     </
	
	var _c = 0;
	var _r = 1;
	func Sphere3d[c][r] {
		var ptr = #2;
		ptr[_c] = vdup[c];
		ptr[_r] = r;
		ret ptr;
	}

	var _dist = 0;
	var _p = 1;
	var _n = 2;

	func Intersection[var d = -1][var p = 0][var n = 0] {
		var ptr = #3;
		ptr[_dist] = d;
		?(p) ptr[_p] = vdup[p];
		?(n) ptr[_n] = vdup[n];
		ret ptr;
	}

	func SphereIntersect[s][ray] {
		var ins = Intersection[0][0][0];
		var c_o   = sub_vv[ray[_o]][s[_c]];
		var discr = (dot_vv[c_o][c_o] - dot_vv[ray[_d]][c_o] ^ 2);

		? (discr > s[_r]^2) ret ins;

		//printv[ray[_d]];
		//printn[0];
		? (discr < 0) ret ins;
		
		var dist = discr ^ 0.5;
		var delta = (s[_r]^2  - dist^2) ^ 0.5;

		var big_dist = -dot_vv[c_o][ray[_d]];
		var d1 = big_dist - delta;
		var d2 = big_dist + delta;
		var d  = 0;

		? (d1 > 0 && (d2 > d1 || d2 < 0)) {
	        d = d1;
	    } : ? (d2 > 0 && (d1 > d2 || d1 < 0)) {
	        d = d2;
	    } : {
	    	ret ins;
	    }

	    //var d = discr^0.5;
	    var p = RayCast[ray][d];
	    //printv[normalize[sub_vv[s[_c]][p]]];
	    ins = Intersection[d][p][normalize[sub_vv[s[_c]][p]]];
	    ret ins;
	}

	func LightCalc[l][p][n] {
		var l_p = sub_vv[p][l];
		normalize[l_p];

		? (dot_vv[l_p][n] < 0) {
			ret 0;
		}

		var nn = vdup[n];
		mul_to_vi[nn][+1];
		ret dot_vv[l_p][nn];
	}

/>                                MAIN                                       </

	func render[cam][ss][ss_cnt] {
		>> (var y = 0 | y < _SCREEN_H | y += 1) {
			>> (var x = 0 | x < _SCREEN_W | x += 1) {
				var mem_ptr = #;

				var ray = CamRayXY;
				var ins = Intersection[0][0][0];

				>> (var i = 0 | i < ss_cnt | i += 1) {
					var s = ss[i];
					var new_ins = SphereIntersect;

					? (new_ins[_dist] && (new_ins[_dist] < ins[_dist] || ins[_dist] == 0)) {
						ins = new_ins;
					}
				}

				? (ins[_d] > 0) {
					var light = LightCalc[cam + _pos][ins[_p]][ins[_n]];
					// printn[light];
					var c = 12 * light;
					put_pxl;
				} : {
					var c = ' ';
					put_pxl;
				}

				var mem_d = (#) - mem_ptr; // restoring memory
				#(-mem_d);
				//printn[1];
			}
		}
	}

	func main {
		var cam = Camera3d[0][0][0][1][0][0][10][20][10][_SCREEN_W][_SCREEN_H];

		var c1 = Vec3d[10][0][0]  ;
		var s1 = Sphere3d[c1][2.5];

		var c2 = Vec3d[10][0][0];
		var s2 = Sphere3d[c2][3];

		var c3 = Vec3d[10][0][0]  ;
		var s3 = Sphere3d[c3][3.5];

		var c4 = Vec3d[0][0][-1000];
		var s4 = Sphere3d[c4][999] ;

		var ss_cnt = 4;
		var ss[5] ;
		ss[0] = s1;
		ss[1] = s2;
		ss[2] = s3;
		ss[3] = s4;

		g_init;
		>> (var i = 0 | i < 100 | i += 1) {
			>> (var i = 0 | i < 3 | i += 1) {
				var rnd = %(_x)(_z);
				ss[i][_c][rnd] += 1.5 ^ i;
			}

			render;
			g_tick;
		}

	}

	main;

}
